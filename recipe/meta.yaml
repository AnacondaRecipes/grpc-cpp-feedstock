{% set name = "grpc-cpp" %}
{% set version = "1.33.2" %}

# It is not currently possible to compile grpc-cpp on Windows in shared mode:
# _h_env\Library\include\google/protobuf/io/coded_stream.h(1250):
#   warning C4251: 'google::protobuf::io::CodedOutputStream::default_serialization_deterministic_': struct 'std::atomic<bool>'
#   needs to have dll-interface to be used by clients of class 'google::protobuf::io::CodedOutputStream'
# LINK : fatal error LNK1181: cannot open input file 'gpr.lib'
# .. and, considering that this constrains a lot of things like openssl, I have decided to unify to static on all platforms.
# {% set static_build = 'yes' %}  # [win]
# {% set static_build = 'no' %}  # [not win]
{% set static_build = 'yes' %}

package:
  name: {{ name | lower }}
  version: {{ version }}

source:
  url: https://github.com/grpc/grpc/archive/v{{ version }}.tar.gz
  sha256: 2060769f2d4b0d3535ba594b2ab614d7f68a492f786ab94b4318788d45e3278a
  patches:
    - aarch64-tcp-header.patch  # [aarch64]
    - force-protoc-executable.patch
  # You can use module version of re2 if you add this and chage build.sh:
  # - git_url: https://github.com/google/re2
  #   git_ref: aecba11114cf1fac5497aeb844b6966106de3eb6
  #   folder: third_party/re2

build:
  number: 3
  run_exports:
    - {{ pin_subpackage('grpc-cpp', max_pin='x.x') }}
{% if static_build == 'yes' %}
  ignore_run_exports:
    - abseil-cpp
    - c-ares
    - re2
    - openssl
    - zlib
{% endif %}
  script_env:
    - STATIC_BUILD={{ static_build }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - m2-patch  # [win]
    - patch  # [not win]
    - cmake
    - pkg-config  # [unix]
    # `protoc` is also used for building
    - libprotobuf =3.14
    - ninja
    # We need all host deps also in build for cross-compiling
    - abseil-cpp  # [build_platform != target_platform]
    - c-ares      # [build_platform != target_platform]
    - re2         # [build_platform != target_platform]
    - openssl     # [build_platform != target_platform]
    - zlib        # [build_platform != target_platform]
  host:
    # Works on macOS, fails to link on Linux (same problem on x86_64 and ppc64le), using either AD or CF packages:
    #
    # libgrpc.so.13.0.0: undefined reference to `absl::lts_2020_09_23::strings_internal::CatPieces[abi:cxx11](std::initializer_list<absl::lts_2020_09_23::string_view>)' (and)
    # bool absl::lts_2020_09_23::str_format_internal::FormatArgImpl::Dispatch<absl::lts_2020_09_23::string_view>(absl::lts_2020_09_23::str_format_internal::FormatArgImpl::Data, absl::lts_2020_09_23::str_format_internal::FormatConve>
    # absl::lts_2020_09_23::string_view::find(absl::lts_2020_09_23::string_view, unsigned long) const
    # absl::lts_2020_09_23::Status::GetPayload(absl::lts_2020_09_23::string_view) const
    # absl::lts_2020_09_23::ByChar::Find(absl::lts_2020_09_23::string_view, unsigned long) const
    # absl::lts_2020_09_23::Status::Status(absl::lts_2020_09_23::StatusCode, absl::lts_2020_09_23::string_view)
    # absl::lts_2020_09_23::optional_internal::throw_bad_optional_access()
    # absl::lts_2020_09_23::Status::SetPayload(absl::lts_2020_09_23::string_view, absl::lts_2020_09_23::Cord)
    # absl::lts_2020_09_23::string_view::rfind(absl::lts_2020_09_23::string_view, unsigned long) const
    # absl::lts_2020_09_23::numbers_internal::safe_strto32_base(absl::lts_2020_09_23::string_view, int*, int)
    # absl::lts_2020_09_23::string_view::find(char, unsigned long) const
    # absl::lts_2020_09_23::string_view::rfind(char, unsigned long) const
    # absl::lts_2020_09_23::numbers_internal::safe_strto64_base(absl::lts_2020_09_23::string_view, long*, int)
    # absl::lts_2020_09_23::EqualsIgnoreCase(absl::lts_2020_09_23::string_view, absl::lts_2020_09_23::string_view)
    # TODO :: Figure out what is different between these builds.
    - abseil-cpp  # [not linux]
    # conda-forge have this version and it works fine.
    - abseil-cpp =20200225  # [linux]
    - c-ares
    - libprotobuf =3.14
    - re2
    - openssl
    - zlib
  run:
    # Need to pin libprotobuf to the same version used when building,
    # otherwise we may get a different SO ABI version.
    # For example 3.6.1 is ABI-incompatible with 3.6.0...
    - {{ pin_compatible("libprotobuf", min_pin="x.x.x", max_pin="x.x.x") }}
    - zlib

test:
  files:
    - tests/include/*
  commands:
    - grpc_cpp_plugin < /dev/null  # [not win]
    - grpc_cpp_plugin < NUL  # [win]
    - if not exist %PREFIX%\\Library\\lib\\address_sorting.lib exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\gpr.lib exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\grpc.lib exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\grpc++.lib exit 1  # [win]

about:
  home: https://grpc.io/
  license: Apache-2.0
  license_family: APACHE
  license_file: LICENSE
  summary: gRPC - A high-performance, open-source universal RPC framework
  description: |
    gRPC is a modern, open source, high-performance remote procedure call
    (RPC) framework that can run anywhere. gRPC enables client and server
    applications to communicate transparently, and simplifies the building
    of connected systems.

    This package contains the gRPC C++ libraries and header files, as well
    as the code generation plugins.
  doc_url: https://grpc.io/docs/

extra:
  recipe-maintainers:
    - pitrou
    - xhochy
    - wesm
